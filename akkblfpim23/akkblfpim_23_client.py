# -*- coding: utf-8 -*-

"""
    akkblfpim23.akkblfpim_23_client

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""
from .decorators import lazy_property
from .configuration import Configuration
from .controllers.product_controller import ProductController
from .controllers.attribute_controller import AttributeController
from .controllers.attribute_option_controller import AttributeOptionController
from .controllers.attribute_groups_controller import AttributeGroupsController
from .controllers.category_controller import CategoryController
from .controllers.channel_controller import ChannelController
from .controllers.currency_controller import CurrencyController
from .controllers.family_controller import FamilyController
from .controllers.family_variant_2_x_only_controller import FamilyVariant2XOnlyController
from .controllers.measure_family_2_x_only_controller import MeasureFamily2XOnlyController
from .controllers.misc_controller import MiscController

class Akkblfpim23Client(object):

    config = Configuration

    @lazy_property
    def product(self):
        return ProductController()

    @lazy_property
    def attribute(self):
        return AttributeController()

    @lazy_property
    def attribute_option(self):
        return AttributeOptionController()

    @lazy_property
    def attribute_groups(self):
        return AttributeGroupsController()

    @lazy_property
    def category(self):
        return CategoryController()

    @lazy_property
    def channel(self):
        return ChannelController()

    @lazy_property
    def currency(self):
        return CurrencyController()

    @lazy_property
    def family(self):
        return FamilyController()

    @lazy_property
    def family_variant_2_x_only(self):
        return FamilyVariant2XOnlyController()

    @lazy_property
    def measure_family_2_x_only(self):
        return MeasureFamily2XOnlyController()

    @lazy_property
    def misc(self):
        return MiscController()


    def __init__(self, 
                 o_auth_access_token = None):
        if o_auth_access_token != None:
            Configuration.o_auth_access_token = o_auth_access_token


